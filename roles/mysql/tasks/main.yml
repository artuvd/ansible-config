---
- name: Check if MySQL is already installed.
  stat: path=/etc/init.d/mysql
  register: mysql_installed

- name: Update apt cache if MySQL is not yet installed.
  apt: update_cache=yes
  when: not mysql_installed.stat.exists

- name: Determine required MySQL Python libraries.
  set_fact:
    deb_mysql_python_package: "{% if 'python3' in ansible_python_interpreter|default('') %}python3-mysqldb{% else %}python-mysqldb{% endif %}"

- name: Ensure MySQL Python libraries are installed.
  apt: "name={{ deb_mysql_python_package }} state=present"

- name: Ensure MySQL packages are installed.
  apt: "name={{ mysql_packages }} state=present"
  register: deb_mysql_install_packages

- name: Ensure MySQL is stopped after initial install.
  service: "name={{ mysql_daemon }} state=stopped"
  when: not mysql_installed.stat.exists

- name: Delete innodb log files created by apt package after initial install.
  file: path={{ mysql_datadir }}/{{ item }} state=absent
  with_items:
    - ib_logfile0
    - ib_logfile1
  when: not mysql_installed.stat.exists

- name: Get MySQL version.
  command: 'mysql --version'
  register: mysql_cli_version
  changed_when: false
  check_mode: false

- name: Copy my.cnf global MySQL configuration.
  template:
    src: my.cnf.j2
    dest: "{{ mysql_config_file }}"
    owner: root
    group: root
    mode: 0644
    force: "{{ overwrite_global_mycnf }}"
  notify: restart mysql

- name: Verify mysql include directory exists.
  file:
    path: "{{ mysql_config_include_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  when: mysql_config_include_files | length

- name: Copy my.cnf override files into include directory.
  template:
    src: "{{ item.src }}"
    dest: "{{ mysql_config_include_dir }}/{{ item.src | basename }}"
    owner: root
    group: root
    mode: 0644
    force: "{{ item.force | default(False) }}"
  with_items: "{{ mysql_config_include_files }}"
  notify: restart mysql

- name: Create slow query log file (if configured).
  command: "touch {{ mysql_slow_query_log_file }}"
  args:
    creates: "{{ mysql_slow_query_log_file }}"
    warn: false
  when: mysql_slow_query_log_enabled

- name: Create datadir if it does not exist
  file:
    path: "{{ mysql_datadir }}"
    state: directory
    owner: mysql
    group: mysql
    mode: 0755
    setype: mysqld_db_t

- name: Set ownership on slow query log file (if configured).
  file:
    path: "{{ mysql_slow_query_log_file }}"
    state: file
    owner: mysql
    group: "{{ mysql_log_file_group }}"
    mode: 0640
  when: mysql_slow_query_log_enabled

- name: Create error log file (if configured).
  command: "touch {{ mysql_log_error }}"
  args:
    creates: "{{ mysql_log_error }}"
    warn: false
  when:
    - mysql_log == ""
    - mysql_log_error != ""
  tags: ['skip_ansible_galaxy']

- name: Set ownership on error log file (if configured).
  file:
    path: "{{ mysql_log_error }}"
    state: file
    owner: mysql
    group: "{{ mysql_log_file_group }}"
    mode: 0640
  when:
    - mysql_log == ""
    - mysql_log_error != ""
  tags: ['skip_ansible_galaxy']

- name: Ensure MySQL is started and enabled on boot.
  service: "name={{ mysql_daemon }} state=started enabled={{ mysql_enabled_on_startup }}"
  register: mysql_service_configuration

- name: Ensure default user is present.
  mysql_user:
    name: "{{ mysql_user_name }}"
    host: 'localhost'
    password: "{{ mysql_user_password }}"
    priv: '*.*:ALL,GRANT'
    state: present
  when: mysql_user_name != mysql_root_username

# Has to be after the password assignment, for idempotency.
- name: Copy user-my.cnf file with password credentials.
  template:
    src: "user-my.cnf.j2"
    dest: "{{ mysql_user_home }}/.my.cnf"
    owner: "{{ mysql_user_name }}"
    mode: 0600
  when: >
    mysql_user_name != mysql_root_username
    and (mysql_install_packages | bool or mysql_user_password_update)
- name: Disallow root login remotely
  command: 'mysql -NBe "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User='{{ mysql_root_username }}' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
  changed_when: false

- name: Allow webserver queries
  shell: >
    mysql -u root -NBe
    'update db set Host='{{ item }}' where db='database';
     update user set Host='{{ item }}' where user='user';
     GRANT ALL PRIVILEGES ON *.* TO 'user'@'{{ item }}' IDENTIFIED BY 'password';
     flush privileges;'
  with_items: {{ webserver_ips}}

- name: Get list of hosts for the root user.
  command: mysql -NBe
    "SELECT Host
    FROM mysql.user
    WHERE User = '{{ mysql_root_username }}'
    ORDER BY (Host='localhost') ASC"
  register: mysql_root_hosts
  changed_when: false
  check_mode: false
  when: mysql_install_packages | bool or mysql_root_password_update

# Note: We do not use mysql_user for this operation, as it doesn't always update
# the root password correctly. See: https://goo.gl/MSOejW
# Set root password for MySQL >= 5.7.x.
- name: Update MySQL root password for localhost root account (5.7.x).
  shell: >
    mysql -u root -NBe
    'ALTER USER "{{ mysql_root_username }}"@"{{ item }}"
    IDENTIFIED WITH mysql_native_password BY "{{ mysql_root_password }}";'
  with_items: "{{ mysql_root_hosts.stdout_lines|default([]) }}"
  when: >
    ((mysql_install_packages | bool) or mysql_root_password_update)
    and ('5.7.' in mysql_cli_version.stdout or '8.0.' in mysql_cli_version.stdout)
# Set root password for MySQL < 5.7.x.
- name: Update MySQL root password for localhost root account (< 5.7.x).
  shell: >
    mysql -NBe
    'SET PASSWORD FOR "{{ mysql_root_username }}"@"{{ item }}" = PASSWORD("{{ mysql_root_password }}");'
  with_items: "{{ mysql_root_hosts.stdout_lines|default([]) }}"
  when: >
    ((mysql_install_packages | bool) or mysql_root_password_update)
    and ('5.7.' not in mysql_cli_version.stdout and '8.0.' not in mysql_cli_version.stdout)
# Has to be after the root password assignment, for idempotency.
- name: Copy .my.cnf file with root password credentials.
  template:
    src: "root-my.cnf.j2"
    dest: "{{ mysql_root_home }}/.my.cnf"
    owner: root
    group: root
    mode: 0600
  when: mysql_install_packages | bool or mysql_root_password_update

- name: Get list of hosts for the anonymous user.
  command: mysql -NBe 'SELECT Host FROM mysql.user WHERE User = ""'
  register: mysql_anonymous_hosts
  changed_when: false
  check_mode: false

- name: Remove anonymous MySQL users.
  mysql_user:
    name: ""
    host: "{{ item }}"
    state: absent
  with_items: "{{ mysql_anonymous_hosts.stdout_lines|default([]) }}"

- name: Remove MySQL test database.
  mysql_db: "name='test' state=absent"

- name: Ensure MySQL databases are present.
  mysql_db:
    name: "{{ item.name }}"
    collation: "{{ item.collation | default('utf8_general_ci') }}"
    encoding: "{{ item.encoding | default('utf8') }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ mysql_databases }}"

- name: Ensure MySQL users are present.
  mysql_user:
    name: "{{ item.name }}"
    host: "{{ item.host | default('localhost') }}"
    password: "{{ item.password }}"
    priv: "{{ item.priv | default('*.*:USAGE') }}"
    state: "{{ item.state | default('present') }}"
    append_privs: "{{ item.append_privs | default('no') }}"
    encrypted: "{{ item.encrypted | default('no') }}"
  with_items: "{{ mysql_users }}"
  no_log: true

- name: Ensure replication user exists on master.
  mysql_user:
    name: "{{ mysql_replication_user.name }}"
    host: "{{ mysql_replication_user.host | default('%') }}"
    password: "{{ mysql_replication_user.password }}"
    priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE,REPLICATION CLIENT') }}"
    state: present
  when:
    - mysql_replication_role == 'master'
    - mysql_replication_user
    - mysql_replication_master != ''
  tags: ['skip_ansible_galaxy']

- name: Check slave replication status.
  mysql_replication:
    mode: getslave
    login_user: "{{ mysql_replication_user.name }}"
    login_password: "{{ mysql_replication_user.password }}"
  ignore_errors: true
  register: slave
  when:
    - mysql_replication_role == 'slave'
    - mysql_replication_master != ''
  tags: ['skip_ansible_galaxy']

- name: Check master replication status.
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_replication_master }}"
  register: master
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - mysql_replication_master != ''
  tags: ['skip_ansible_galaxy']

- name: Configure replication on the slave.
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_replication_master }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.password }}"
    master_log_file: "{{ master.File }}"
    master_log_pos: "{{ master.Position }}"
  ignore_errors: true
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - mysql_replication_master != ''
    - mysql_replication_user

- name: Start replication.
  mysql_replication: mode=startslave
  when:
    - (slave.Is_Slave is defined and not slave.Is_Slave) or (slave.Is_Slave is not defined and slave is failed)
    - mysql_replication_role == 'slave'
    - mysql_replication_master != ''
  tags: ['skip_ansible_galaxy']